# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RCjtXuGTwqS5ZabyHQ-M5C8AEcMb4Xip
"""

# STEP 1: Upload the Dataset
from google.colab import files
uploaded = files.upload()

# STEP 2: Load the Dataset
import pandas as pd
import io

# Assuming the uploaded file is named 'churn_data.csv'
df = pd.read_csv(io.BytesIO(uploaded['Churn_Modelling (1).csv'])) # Use the actual key from the uploaded dictionary
df.head()

# STEP 3: Data Exploration
df.info()
df.describe()
# Check if 'churn' column exists, and if not, use the correct column name
if 'churn' in df.columns:
    df['churn'].value_counts()  # Check class balance
else:
    # Assuming the correct column name is 'Exited' based on the common churn datasets
    df['Exited'].value_counts()  # Check class balance
    print("Column 'churn' not found. Using 'Exited' column instead.")

# STEP 4: Check for Missing Values and Duplicates
print(df.isnull().sum())  # Missing values
print(df.duplicated().sum())  # Duplicate rows
df = df.drop_duplicates()

# STEP 5: Visualize a Few Features
import seaborn as sns
import matplotlib.pyplot as plt

# Use 'Exited' instead of 'churn' for the countplot
sns.countplot(x='Exited', data=df)
plt.title('Churn Distribution')
plt.show()

# Use 'Exited' instead of 'churn' for the boxplot
# Check if 'MonthlyCharges' column exists in the DataFrame
if 'MonthlyCharges' in df.columns:
    sns.boxplot(x='Exited', y='MonthlyCharges', data=df)
    plt.title('Monthly Charges vs Churn')
    plt.show()
else:
    print("Column 'MonthlyCharges' not found in the DataFrame.")
    # Check for possible typos or case sensitivity issues
    print("Available columns:", df.columns)

# STEP 6: Identify Target and Features
X = df.drop('Exited', axis=1)  # Features - Changed 'churn' to 'Exited'
y = df['Exited']               # Target - Changed 'churn' to 'Exited'

# STEP 7: Convert Categorical Columns to Numerical
# Check for object (categorical) columns
categorical_cols = X.select_dtypes(include=['object']).columns.tolist()
print("Categorical Columns:", categorical_cols)

# STEP 8: One-Hot Encoding
X = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

# STEP 9: Feature Scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# STEP 10: Train-Test Split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# STEP 11: Model Building
from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()
model.fit(X_train, y_train)

# STEP 12: Evaluation
from sklearn.metrics import classification_report, confusion_matrix

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# STEP 13: Make Predictions from New Input
# Example new input (must match the original feature structure)
new_input = {
    'gender': 'Male',
    'tenure': 12,
    'monthly_charges': 75.5,
    'contract_type': 'Month-to-month'
    # Add all other required fields based on your dataset
}

# STEP 14: Convert to DataFrame and Encode
new_df = pd.DataFrame([new_input])

# One-hot encode and align with training columns
new_df_encoded = pd.get_dummies(new_df)
new_df_encoded = new_df_encoded.reindex(columns=X.columns, fill_value=0)

# Scale
new_scaled = scaler.transform(new_df_encoded)

# STEP 15: Predict the Final Grade (Churn)
final_prediction = model.predict(new_scaled)
print("Churn Prediction:", "Yes" if final_prediction[0] == 1 else "No")

# STEP 16: Deployment - Building an Interactive App
!pip install gradio
import gradio as gr

# STEP 17: Create a Prediction Function
def predict_churn(gender, tenure, monthly_charges, contract_type):
    input_data = {
        'gender': gender,
        'tenure': tenure,
        'monthly_charges': monthly_charges,
        'contract_type': contract_type,
        # Add all features your model expects
    }
    input_df = pd.DataFrame([input_data])
    input_df = pd.get_dummies(input_df)
    input_df = input_df.reindex(columns=X.columns, fill_value=0)
    input_scaled = scaler.transform(input_df)
    prediction = model.predict(input_scaled)[0]
    return "Yes" if prediction == 1 else "No"

# STEP 18: Create the Gradio Interface
interface = gr.Interface(
    fn=predict_churn,
    inputs=[
        gr.Dropdown(['Male', 'Female'], label='Gender'),
        gr.Slider(0, 72, step=1, label='Tenure (months)'),
        gr.Slider(0, 150, step=1, label='Monthly Charges'),
        gr.Dropdown(['Month-to-month', 'One year', 'Two year'], label='Contract Type')
    ],
    outputs='text',
    title='ðŸŽ“ Student Performance Predictor'  # Customize as: Churn Prediction App
)

interface.launch()

